datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

model IconGlobal {
  id         String  @id @default(uuid())
  idFlatIcon String?
  url        String?

  Icon Icon?

  @@index([idFlatIcon])
  @@index([url])
}

model IconUser {
  id         String  @id @default(uuid())
  idFlatIcon String?
  url        String?

  idUser String
  user   User   @relation(fields: [idUser], references: [id], onDelete: Cascade)

  Icon Icon?

  @@index([idUser])
}

enum IconSource {
  System
  User
}

model Icon {
  id     String     @id @default(uuid())
  source IconSource

  idIconGlobal String? @map("systemIconId")
  idIconUser   String? @map("userIconId")

  iconGlobal IconGlobal? @relation(fields: [idIconGlobal], references: [id], onDelete: Cascade)
  iconUser   IconUser?   @relation(fields: [idIconUser], references: [id], onDelete: Cascade)

  wallet   Wallet[]
  category Category[]

  @@unique([idIconGlobal])
  @@unique([idIconUser])
}

model User {
  id           String              @id @default(uuid())
  email        String              @unique
  name         String
  wallets      Wallet[]
  categories   Category[]
  transactions Transaction[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  syncConfig   SyncConfig[]
  iconUser     IconUser[]
  adjustments  TransactionAdjust[]

  @@index([email])
}

model SyncConfig {
  id        String   @id @default(uuid())
  idUser    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [idUser], references: [id], onDelete: Cascade)

  fromEmail String
  provider  String @default("gmail")

  toWallet Wallet? @relation(fields: [walletId], references: [id], onDelete: SetNull)
  walletId String?

  @@unique([idUser, provider, fromEmail, walletId])
  @@index([idUser])
}

model Wallet {
  id              String     @id @default(uuid())
  name            String
  initBalance     Decimal    @default(0) @db.Decimal(19, 4)
  type            WalletType
  idUser          String
  user            User       @relation(fields: [idUser], references: [id], onDelete: Cascade)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  includeInReport Boolean    @default(true)

  cardNumber            String?
  cardStatementPassword String?
  cardStatementDate     DateTime?
  syncConfig            SyncConfig[]

  idIcon String?
  icon   Icon?   @relation(fields: [idIcon], references: [id], onDelete: SetNull)

  transactions            Transaction[]
  transactionTransferFrom TransactionTransfer[] @relation("TransactionTransferFrom")
  transactionTransferTo   TransactionTransfer[] @relation("TransactionTransferTo")

  @@unique([idUser, name])
  @@index([idIcon])
  @@index([idUser])
}

model Category {
  id           String        @id @default(uuid())
  name         String
  idUser       String
  idParent     String?
  type         CategoryType
  user         User          @relation(fields: [idUser], references: [id], onDelete: Cascade)
  parent       Category?     @relation("CategoryToCategory", fields: [idParent], references: [id], onDelete: SetNull)
  children     Category[]    @relation("CategoryToCategory")
  transactions Transaction[]

  idIcon String?
  icon   Icon?   @relation(fields: [idIcon], references: [id], onDelete: SetNull)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeletable Boolean  @default(false)

  @@unique([idUser, name, type])
  @@index([idUser])
  @@index([idParent])
  @@index([type])
}

model Transaction {
  id         String    @id @default(uuid())
  idUser     String
  idWallet   String? // Có thể null khi tạo transaction nhanh
  idCategory String?
  amount     Decimal   @db.Decimal(19, 4)
  note       String?
  date       DateTime  @default(now())
  user       User      @relation(fields: [idUser], references: [id], onDelete: Cascade)
  wallet     Wallet?   @relation(fields: [idWallet], references: [id], onDelete: SetNull)
  category   Category? @relation(fields: [idCategory], references: [id], onDelete: SetNull)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  infoSync TransactionInfoSync?
  adjust   TransactionAdjust?

  idTransfer String?
  transfer   TransactionTransfer? @relation(fields: [idTransfer], references: [id], onDelete: Cascade)

  includeInReport Boolean @default(true)

  @@index([idUser, date(sort: Desc), id(sort: Desc)])
  @@index([idWallet])
  @@index([idCategory])
  @@index([idUser, idWallet, date(sort: Desc)])
  @@index([idUser, idCategory, date(sort: Desc)])
}

model TransactionTransfer {
  id        String   @id @default(uuid())
  idUser    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  idWalletFrom String
  idWalletTo   String

  walletFrom   Wallet?       @relation("TransactionTransferFrom", fields: [idWalletFrom], references: [id], onDelete: Cascade)
  walletTo     Wallet?       @relation("TransactionTransferTo", fields: [idWalletTo], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model TransactionInfoSync {
  id        String   @id @default(uuid())
  idUser    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emailProvider String
  providerMsgId String
  emailReceived String
  emailTitle    String

  idTransaction String?      @unique
  transaction   Transaction? @relation(fields: [idTransaction], references: [id], onDelete: Cascade)

  @@unique([idUser, emailProvider, providerMsgId])
  @@index([idUser])
}

model TransactionAdjust {
  id        String   @id @default(uuid())
  idUser    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reason String
  amount Decimal @db.Decimal(19, 4)

  user          User        @relation(fields: [idUser], references: [id], onDelete: Cascade)
  idTransaction String      @unique
  transaction   Transaction @relation(fields: [idTransaction], references: [id], onDelete: Cascade)

  @@index([idUser])
}

enum CategoryType {
  Income
  Expense
  Other
}

enum WalletType {
  Cash
  Debit
  Credit
  Crypto
}
