generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model IconGlobal {
  id         String  @id @default(uuid())
  url        String?
  idFlatIcon String?
  Icon       Icon?

  @@index([idFlatIcon])
  @@index([url])
}

model IconUser {
  id         String  @id @default(uuid())
  idFlatIcon String?
  url        String?
  idUser     String
  Icon       Icon?
  user       User    @relation(fields: [idUser], references: [id], onDelete: Cascade)

  @@index([idUser])
}

model Icon {
  id           String      @id @default(uuid())
  source       IconSource
  idIconGlobal String?     @unique @map("systemIconId")
  idIconUser   String?     @unique @map("userIconId")
  category     Category[]
  iconGlobal   IconGlobal? @relation(fields: [idIconGlobal], references: [id], onDelete: Cascade)
  iconUser     IconUser?   @relation(fields: [idIconUser], references: [id], onDelete: Cascade)
  wallet       Wallet[]
}

model User {
  id           String              @id @default(uuid())
  email        String              @unique
  name         String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  categories   Category[]
  iconUser     IconUser[]
  syncConfig   SyncConfig[]
  transactions Transaction[]
  adjustments  TransactionAdjust[]
  splits       TransactionSplit[]
  wallets      Wallet[]

  @@index([email])
}

model SyncConfig {
  id        String   @id @default(uuid())
  idUser    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fromEmail String
  walletId  String?
  provider  String   @default("gmail")
  user      User     @relation(fields: [idUser], references: [id], onDelete: Cascade)
  toWallet  Wallet?  @relation(fields: [walletId], references: [id])

  @@unique([idUser, provider, fromEmail, walletId])
  @@index([idUser])
}

model Wallet {
  id                    String             @id @default(uuid())
  name                  String
  initBalance           Decimal            @default(0) @db.Decimal(19, 4)
  type                  WalletType
  idUser                String
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  includeInReport       Boolean            @default(true)
  cardNumber            String?
  cardStatementPassword String?
  cardStatementDate     DateTime?
  idIcon                String?
  syncConfig            SyncConfig[]
  transactionTransferTo Transaction[]      @relation("TransactionTransferTo")
  transactions          Transaction[]
  splitsReceived        TransactionSplit[]
  icon                  Icon?              @relation(fields: [idIcon], references: [id])
  user                  User               @relation(fields: [idUser], references: [id], onDelete: Cascade)

  @@unique([idUser, name])
  @@index([idIcon])
  @@index([idUser])
}

model Category {
  id           String        @id @default(uuid())
  name         String
  idUser       String
  idIcon       String?
  idParent     String?
  type         CategoryType
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isDeletable  Boolean       @default(false)
  icon         Icon?         @relation(fields: [idIcon], references: [id])
  parent       Category?     @relation("CategoryToCategory", fields: [idParent], references: [id], onDelete: Cascade)
  children     Category[]    @relation("CategoryToCategory")
  user         User          @relation(fields: [idUser], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([idUser, name, type])
  @@index([idUser])
  @@index([idParent])
  @@index([type])
}

model Transaction {
  id                 String               @id @default(uuid())
  idUser             String
  idWallet           String?
  idCategory         String?
  amount             Decimal              @db.Decimal(19, 4)
  note               String?
  date               DateTime             @default(now())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  includeInReport    Boolean              @default(true)
  idWalletTransferTo String?
  isNeedSplit        Boolean              @default(false)
  category           Category?            @relation(fields: [idCategory], references: [id])
  user               User                 @relation(fields: [idUser], references: [id], onDelete: Cascade)
  walletTransferTo   Wallet?              @relation("TransactionTransferTo", fields: [idWalletTransferTo], references: [id])
  wallet             Wallet?              @relation(fields: [idWallet], references: [id])
  adjust             TransactionAdjust?
  infoSync           TransactionInfoSync?
  splits             TransactionSplit[]

  @@index([idUser, date(sort: Desc), id(sort: Desc)])
  @@index([idWallet])
  @@index([idCategory])
  @@index([idWalletTransferTo])
  @@index([idUser, idWallet, date(sort: Desc)])
  @@index([idUser, idCategory, date(sort: Desc)])
  @@index([idUser, idWalletTransferTo, date(sort: Desc)])
}

model TransactionSplit {
  id            String      @id @default(uuid())
  amount        Decimal     @db.Decimal(19, 4)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  idTransaction String
  idWallet      String
  idUser        String
  note          String?
  transaction   Transaction @relation(fields: [idTransaction], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [idUser], references: [id], onDelete: Cascade)
  wallet        Wallet      @relation(fields: [idWallet], references: [id], onDelete: Cascade)

  @@index([idTransaction])
  @@index([idWallet])
  @@index([idUser])
  @@index([createdAt])
}

model TransactionInfoSync {
  id            String       @id @default(uuid())
  idUser        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  emailProvider String
  emailTitle    String
  providerMsgId String
  emailReceived String
  idTransaction String?      @unique
  transaction   Transaction? @relation(fields: [idTransaction], references: [id], onDelete: Cascade)

  @@unique([idUser, emailProvider, providerMsgId])
  @@index([idUser])
}

model TransactionAdjust {
  id            String      @id @default(uuid())
  idUser        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  reason        String
  amount        Decimal     @db.Decimal(19, 4)
  idTransaction String      @unique
  transaction   Transaction @relation(fields: [idTransaction], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [idUser], references: [id], onDelete: Cascade)

  @@index([idUser])
}

enum IconSource {
  System
  User
}

enum CategoryType {
  Income
  Expense
  Other
}

enum WalletType {
  Cash
  Debit
  Credit
  Crypto
}
