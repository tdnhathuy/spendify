datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String
  wallets      Wallet[]
  categories   Category[]
  transactions Transaction[]
  icons        Icon[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  syncConfig   SyncConfig[]

  @@index([email])
}

model SyncConfig {
  id        String   @id @default(uuid())
  idUser    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [idUser], references: [id])

  fromEmail String
  toWallet  Wallet @relation(fields: [walletId], references: [id])
  walletId  String

  @@index([idUser])
}

model Icon {
  id           String        @id @default(uuid())
  code         String
  idUser       String
  user         User          @relation(fields: [idUser], references: [id])
  wallets      Wallet[]
  categories   Category[]
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([idUser])
  @@index([code])
}

model Wallet {
  id              String        @id @default(uuid())
  name            String
  initBalance     Float         @default(0)
  type            WalletType
  idUser          String
  idIcon          String?
  user            User          @relation(fields: [idUser], references: [id])
  icon            Icon?         @relation(fields: [idIcon], references: [id])
  transactions    Transaction[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  includeInReport Boolean       @default(true)

  cardNumber            String?
  cardStatementPassword String?
  cardStatementDate     DateTime?
  SyncConfig            SyncConfig[]

  @@index([idUser])
  @@index([idIcon])
}

model Category {
  id           String        @id @default(uuid())
  name         String
  idUser       String
  idIcon       String?
  idParent     String?
  type         CategoryType
  user         User          @relation(fields: [idUser], references: [id])
  icon         Icon?         @relation(fields: [idIcon], references: [id])
  parent       Category?     @relation("CategoryToCategory", fields: [idParent], references: [id])
  children     Category[]    @relation("CategoryToCategory")
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([idUser])
  @@index([idParent])
  @@index([type])
}

model Transaction {
  id         String    @id @default(uuid())
  idUser     String
  idWallet   String?
  idCategory String?
  idIcon     String?
  amount     Float
  note       String?
  date       DateTime  @default(now())
  user       User      @relation(fields: [idUser], references: [id])
  wallet     Wallet?   @relation(fields: [idWallet], references: [id])
  category   Category? @relation(fields: [idCategory], references: [id])
  icon       Icon?     @relation(fields: [idIcon], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  infoSync TransactionInfoSync?

  @@index([idUser, date(sort: Desc), id(sort: Desc)])
  @@index([idWallet])
  @@index([idCategory])
}

model TransactionInfoSync {
  id        String   @id @default(uuid())
  idUser    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emailProvider String
  emailReceived String
  emailTitle    String

  idTransaction String      @unique
  transaction   Transaction @relation(fields: [idTransaction], references: [id])

  @@index([idUser])
}

enum CategoryType {
  Income
  Expense
}

enum WalletType {
  Cash
  Debit
  Credit
  Crypto
}
