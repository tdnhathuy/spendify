generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  name              String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  categories        Category[]
  icons             Icon[]
  transactions      Transaction[]
  transactionSplits TransactionSplit[]
  wallets           Wallet[]
}

model Icon {
  id         String     @id @default(uuid())
  name       String
  svgUrl     String?
  idFlatIcon String?
  isDefault  Boolean    @default(false)
  idUser     String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]
  user       User?      @relation(fields: [idUser], references: [id], onDelete: Cascade)
  wallets    Wallet[]
}

model Wallet {
  id             String             @id @default(uuid())
  name           String
  type           WalletType
  includeInTotal Boolean            @default(true)
  balance        Float              @default(0)
  idIcon         String?
  idUser         String
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  transactions   Transaction[]      @relation("WalletTransactions")
  splitsFrom     TransactionSplit[] @relation("SplitFromWallet")
  splitsTo       TransactionSplit[] @relation("SplitToWallet")
  icon           Icon?              @relation(fields: [idIcon], references: [id])
  user           User               @relation(fields: [idUser], references: [id], onDelete: Cascade)
}

model Category {
  id           String        @id @default(uuid())
  name         String
  type         CategoryType
  idParent     String?
  idIcon       String?
  idUser       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  icon         Icon?         @relation(fields: [idIcon], references: [id])
  parent       Category?     @relation("CategoryToParent", fields: [idParent], references: [id])
  children     Category[]    @relation("CategoryToParent")
  user         User          @relation(fields: [idUser], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([idParent])
}

model Transaction {
  id                String             @id @default(uuid())
  note              String?
  amount            Float
  date              DateTime           @default(now())
  isNeedToSplit     Boolean            @default(false)
  idCategory        String?
  idWallet          String?
  idUser            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  isInitTransaction Boolean            @default(false)
  category          Category?          @relation(fields: [idCategory], references: [id])
  user              User               @relation(fields: [idUser], references: [id], onDelete: Cascade)
  wallet            Wallet?            @relation("WalletTransactions", fields: [idWallet], references: [id])
  splits            TransactionSplit[]
}

model TransactionSplit {
  id            String      @id @default(uuid())
  idWalletFrom  String?
  idWalletTo    String?
  amount        Float
  idTransaction String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  idUser        String
  transaction   Transaction @relation(fields: [idTransaction], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [idUser], references: [id], onDelete: Cascade)
  fromWallet    Wallet?     @relation("SplitFromWallet", fields: [idWalletFrom], references: [id])
  toWallet      Wallet?     @relation("SplitToWallet", fields: [idWalletTo], references: [id])
}

enum WalletType {
  Cash
  Debit
  Credit
  Crypto
}

enum CategoryType {
  Income
  Spend
}
